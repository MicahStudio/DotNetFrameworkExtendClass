{"name":"Dotnetframeworkextendclass","tagline":"DotNet的一些扩展方法和常用的封装","body":"### 这是咋来的？\r\n这个项目中的方法都是在工作过程中遇到的一些重复操作进行的封装，扩展方法用起来很方便，但是会牺牲一点性能。不过在现在内存都足够的情况下，这点牺牲在我所参与的项目中都是可以接受的，而这些扩展方法也的确方便了项目的开发与维护。\r\n\r\n### System.String\r\n\r\n+ bool IsNullOrWhiteSpace()\r\n+ string Append(string text)\r\n+ byte[] ToBytes()\r\n+ string ToMD5()\r\n+ string Encrypt(string SecretKey, bool SingleLine = true, bool Standard = false)\r\n+ string Decrypt(string SecretKey, bool SingleLine = true, bool Standard = false)\r\n\r\n**示例**\r\n```csharp\r\n    string simple = \"Hello world.\";\r\n    if(simple.IsNullOrWhiteSpace()){\r\n        Console.WriteLine(\"空字符串。\");\r\n    }\r\n    string newsimple = simple.Append(\"Hello Github.\");\r\n    var buffer = newsimple.ToBytes();\r\n    string md5string = newsimple.ToMD5();\r\n    string en = newsimple.Encrypt(\"密钥\");\r\n    string de = en.Decrypt(\"密钥\");\r\n```\r\n\r\n### System.Random\r\n\r\n+ string NextString(int Length = 6, bool AllowedRepeat = true)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    Random rand = new Random();\r\n    string randstring1 = rand.NextString();\r\n    string randstring2 = rand.NextString(10);\r\n    string randstring3 = rand.NextString(10,true);\r\n```\r\n\r\n### System.DateTime\r\n\r\n+ int WeekOfYear()\r\n+ Int64 UnixTimestamp()\r\n+ Int64 UnixTimestamp(DateTime datetime)\r\n+ DateTime ToChineseCalendar()\r\n+ int GetSexagenaryYear()\r\n+ string GetSexagenaryYearString()\r\n+ int GetTerrestrialBranch()\r\n+ string GetTerrestrialBranchString()\r\n+ int GetDaysInYear()\r\n\r\n**示例**\r\n\r\n```csharp\r\n    DateTime datetime = DateTime.Now;\r\n    int woy = datetime.WeekOfYear();\r\n    long timestamp1 = datetime.UnixTimestamp();\r\n    long timestamp2 = datetime.UnixTimestamp(new DateTime(2046,10,1,0,0,0));\r\n    DateTime chinese = datetime.ToChineseCalendar();//2046-9-2\r\n    int jiazi= dateime.GetSexagenaryYear();//3\r\n    string jiazistring = dateime.GetSexagenaryYearString();//丙寅\r\n    int dizhi = dateime.GetTerrestrialBranch();//3\r\n    string dizhistring = datetime.GetTerrestrialBranchString();//寅\r\n    int days = datetime.GetDaysInYear();//354\r\n```\r\n\r\n### 关于MEF插件式的扩展\r\n\r\n此方法将载入插件的形式进行了封装，参数留空则插件目录默认为Lib，可以自己传入目录。\r\n\r\n**示例**\r\n\r\n```csharp\r\n    public class MEFTest{\r\n        public MEFTest(){\r\n                this.ComposePartsSelf();\r\n                //this.ComposePartsSelf(\"plugins\");\r\n        }\r\n    }\r\n```\r\n\r\n### System.Byte\r\n\r\n+ string Decrypt(string SecretKey, bool SingleLine = true, bool Standard = false)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    byte[] bytes = getEncryptBytes();\r\n    string de = bytes.Decrypt(\"密钥\");\r\n```\r\n\r\n### System.Net.NetworkInformation.Ping\r\n\r\n+ bool IsWork(string IPAddress, int Timeout = 300)\r\n+ PingReply Reply(string IPAddress, int Timeout = 300)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    Pint p = new Ping();\r\n    bool isWork = p.IsWork(\"192.168.0.1\");\r\n    PingReply pr = p.Reply(\"192.168.0.1\");\r\n```\r\n\r\n### System.Linq.IQueryable<out T>\r\n\r\n+ IQueryable<TSource> Sorting<TSource>(string OrderParameter, SortDirection OrderDirection)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    var items = items.Sorting(\"要排序的字段名\",SortDirection.OrderByDescending);\r\n```\r\n\r\n### System.Data.SqlClient.SqlCommand\r\n\r\n+ void AddParameters(string ParameterName, System.Data.SqlDbType SqlDbType, object Value)\r\n+ void AddParameters(string ParameterName, object Value)\r\n+ ObservableCollection<T> GenericList<T>()\r\n+ T GenericObject<T>()\r\n\r\n### System.Collections.ObjectModel.ObservableCollection<T>\r\n\r\n+ int PageSize<T>(int Number)\r\n+ ObservableCollection<T> PageCollection<T>(int Number, int CurrentSize)\r\n\r\n### DotNetFrameworkExtendClass.WinRAR\r\n\r\n***使用该类需要在客户端安装了WinRAR软件。***\r\n\r\n+ bool UnRar(string zipFilePath, string UnZipPath)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    WinRAR rar = new WinRAR();\r\n    bool result = rar.UnRar(@\"C:\\test.rar\",@\"D:\\unrar\");    \r\n```\r\n\r\n### DotNetFrameworkExtendClass.Singleton<T>\r\n\r\n***用反射模式实现单例模式的基类***\r\n\r\n***示例***\r\n\r\n```csharp\r\n    public sealed class TestApp : Singleton<TestApp>{\r\n        private TestApp(){}\r\n        //********//\r\n    }\r\n    public class Program{\r\n        public void Main(){\r\n           TestApp ta = TestApp.Instance;\r\n        }\r\n    }\r\n```\r\n\r\n### DotNetFrameworkExtendClass.IConfigurationManager\r\n\r\n***该接口可以对应用程序配置文件app.config进行操作***\r\n+ IsSecret:是否对字段的值进行加密（默认为不加密）\r\n+ SecretKey:加＼解密的Key（需要将IsSecret设置为Ture才会生效）\r\n+ UpdateOnInsert(ConfigurationManagerSectionType SectionType, string Key, string Value)\r\n+ string GetValue(ConfigurationManagerSectionType SectionType, string Key, string defaultValue = \"\")\r\n\r\n### DotNetFrameworkExtendClass.GenerationBitmapVerificationCode\r\n\r\n+ Image Out(Color FontColor, Color BackgroundColor, int Width = 200, int Height = 75, float FontSize = 13, string Code = \"\", int Length = 4)\r\n\r\n***示例***\r\n```csharp\r\n    GenerationBitmapVerificationCode code = GenerationBitmapVerificationCode.Instance;\r\n    Image bmp = code.Out(Color.White,Color.Black);\r\n```\r\n### DotNetFrameworkExtendClass.EmailHelper\r\n\r\n+ void ForNetease(string Form, string UserID, string Password, string To, string Title, string Content, System.Net.Mail.MailPriority Priority = System.Net.Mail.MailPriority.High)\r\n+ void ForCustom(string Form, string Smtp, int SmtpPort, string UserID, string Password, string To, string Title, string Content, System.Net.Mail.MailPriority Priority = System.Net.Mail.MailPriority.High)\r\n\r\n***示例***\r\n\r\n```csharp\r\n    EmailHelper email = EmailHelper.Instance;\r\n    email.ForNetease(\"admin@163.com\",\"admin\",\"adminpassword\",\"client@qq.com\",\"邮件标题\",\"邮件正文内容。\");\r\n    email.ForCustom(\"admin@qq.com\",\"smtp.qq.com\",443,\"admin\",\"adminpassword\",\"client@qq.com\",\"邮件标题\",\"邮件正文内容。\");\r\n```\r\n\r\n### DotNetFrameworkExtendClass.ExeConfigContext\r\n***单例模式对exe.config进行操作***\r\n\r\n+ void SetConnectionString(string name, string connectionString)\r\n+ string GetConnectionString(string name)\r\n+ void SetValue<T>(string name, T value) where T : struct\r\n+ string GetValue(string name)\r\n+ T GetValue<T>(string name) where T : struct\r\n\r\n***示例***\r\n\r\n```csharp\r\n    ExeConfigContext config = ExeConfigContext.Instance;\r\n    config.SetConnectionString(\"DBConnection\",\"Server=.;Database=mydbs;User Id=sa;Password=sa;\")\r\n    string connectionString = config.GetConnectionString(\"DBConnection\");\r\n    config.SetValue<bool>(\"Status\",true);\r\n    string value1 = config.GetValue(\"Status\");\r\n    bool value2 = config.GetValue<bool>(\"Status\");\r\n```\r\n\r\n### DotNetFrameworkExtendClass.ApplicationProcess\r\n\r\n+ string[] ProcessNames()\r\n+ bool FindProcessExist(string ProcessName)\r\n\r\n### DotNetFrameworkExtendClass.FileHelper\r\n\r\n+ string GetMD5Hash(string FileName, string Separator = \"\", bool Upper = true)\r\n\r\n### DotNetFrameworkExtendClass.PerformanceObservation\r\n\r\n***单例模式***\r\n\r\n+ void TotalMemoryBegin()\r\n+ void TotalMemoryEnd()\r\n+ UseMemory:计算内存消耗量(Kb)\r\n+ void BeginTime()\r\n+ void EndTime()\r\n+ Useup:计算消耗时间（毫秒）\r\n\r\n***示例***\r\n\r\n```csharp\r\n    PerformanceObservation po= PerformanceObservation.Instance;\r\n    po.TotalMemoryBegin()\r\n    ///消耗内存的操作\r\n    po.TotalMemoryEnd()\r\n    Console.WriteLine(\"内存消耗：{0}(kb)\",po.UseMemory);\r\n    po.BeginTime()\r\n    ///耗时操作\r\n    po.EndTime()\r\n    Console.WriteLine(\"耗时：{0}(ms)\",po.Useup);\r\n```\r\n\r\n### DotNetFrameworkExtendClass.ScheduledTasks\r\n\r\n***添加Windows计划任务静态类***\r\n\r\n+ void CreateTask(string TaskName, int Minute, string FullPath)\r\n+ void DeleteTask(string TaskName)\r\n\r\n### DotNetFrameworkExtendClass.Messaging.Messenger\r\n\r\n***来自于MVVM源码***\r\n\r\n***示例***\r\n\r\n```csharp\r\n    Messenger.Default.Register<T>(\"Token\",(sender)=>{ });\r\n    Messenger.Default.Send<T>(new Object{},\"Token\");\r\n```\r\n\r\n### 关于我\r\n\r\n* 程序猿\r\n* 参与过政府类项目、民生类项目、以及商业项目\r\n* 人手不够的时候我自己完成过一个项目（简直难以忍受= =|||）\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}