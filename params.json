{"name":"Dotnetframeworkextendclass","tagline":"DotNet的一些扩展方法和常用的封装","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### System.String\r\n\r\n+ bool IsNullOrWhiteSpace()\r\n+ string Append(string text)\r\n+ byte[] ToBytes()\r\n+ string ToMD5()\r\n+ string Encrypt(string SecretKey, bool SingleLine = true, bool Standard = false)\r\n+ string Decrypt(string SecretKey, bool SingleLine = true, bool Standard = false)\r\n\r\n**示例**\r\n```csharp\r\n    string simple = \"Hello world.\";\r\n    if(simple.IsNullOrWhiteSpace()){\r\n        Console.WriteLine(\"空字符串。\");\r\n    }\r\n    string newsimple = simple.Append(\"Hello Github.\");\r\n    var buffer = newsimple.ToBytes();\r\n    string md5string = newsimple.ToMD5();\r\n    string en = newsimple.Encrypt(\"密钥\");\r\n    string de = en.Decrypt(\"密钥\");\r\n```\r\n\r\n### System.Random\r\n\r\n+ string NextString(int Length = 6, bool AllowedRepeat = true)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    Random rand = new Random();\r\n    string randstring1 = rand.NextString();\r\n    string randstring2 = rand.NextString(10);\r\n    string randstring3 = rand.NextString(10,true);\r\n```\r\n\r\n### System.DateTime\r\n\r\n+ int WeekOfYear()\r\n+ Int64 UnixTimestamp()\r\n+ Int64 UnixTimestamp(DateTime datetime)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    DateTime datetime = DateTime.Now;\r\n    int woy = datetime.WeekOfYear();\r\n    long timestamp1 = datetime.UnixTimestamp();\r\n    long timestamp2 = datetime.UnixTimestamp(new DateTime(2046,10,1,0,0,0));\r\n```\r\n\r\n### 关于MEF插件式的扩展\r\n\r\n此方法将载入插件的形式进行了封装，参数留空则插件目录默认为Lib，可以自己传入目录。\r\n\r\n**示例**\r\n\r\n```csharp\r\n    public class MEFTest{\r\n        public MEFTest(){\r\n                this.ComposePartsSelf();\r\n                //this.ComposePartsSelf(\"plugins\");\r\n        }\r\n    }\r\n```\r\n\r\n### System.Byte\r\n\r\n+ string Decrypt(string SecretKey, bool SingleLine = true, bool Standard = false)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    byte[] bytes = getEncryptBytes();\r\n    string de = bytes.Decrypt(\"密钥\");\r\n```\r\n\r\n### System.Net.NetworkInformation.Ping\r\n\r\n+ bool IsWork(string IPAddress, int Timeout = 300)\r\n+ PingReply Reply(string IPAddress, int Timeout = 300)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    Pint p = new Ping();\r\n    bool isWork = p.IsWork(\"192.168.0.1\");\r\n    PingReply pr = p.Reply(\"192.168.0.1\");\r\n```\r\n\r\n### System.Linq.IQueryable<out T>\r\n\r\n+ IQueryable<TSource> Sorting<TSource>(string OrderParameter, SortDirection OrderDirection)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    var items = items.Sorting(\"要排序的字段名\",SortDirection.OrderByDescending);\r\n```\r\n\r\n### System.Data.SqlClient.SqlCommand\r\n\r\n+ void AddParameters(string ParameterName, System.Data.SqlDbType SqlDbType, object Value)\r\n+ void AddParameters(string ParameterName, object Value)\r\n+ ObservableCollection<T> GenericList<T>()\r\n+ T GenericObject<T>()\r\n\r\n### System.Collections.ObjectModel.ObservableCollection<T>\r\n\r\n+ int PageSize<T>(int Number)\r\n+ ObservableCollection<T> PageCollection<T>(int Number, int CurrentSize)\r\n\r\n### DotNetFrameworkExtendClass.WinRAR\r\n\r\n***使用该类需要在客户端安装了WinRAR软件。***\r\n\r\n+ bool UnRar(string zipFilePath, string UnZipPath)\r\n\r\n**示例**\r\n\r\n```csharp\r\n    WinRAR rar = new WinRAR();\r\n    bool result = rar.UnRar(@\"C:\\test.rar\",@\"D:\\unrar\");    \r\n```\r\n\r\n### DotNetFrameworkExtendClass.Singleton<T>\r\n\r\n***用反射模式实现单例模式的基类***\r\n\r\n***示例***\r\n\r\n```csharp\r\n    public sealed class TestApp : Singleton<TestApp>{\r\n        private TestApp(){}\r\n        //********//\r\n    }\r\n    public class Program{\r\n        public void Main(){\r\n           TestApp ta = TestApp.Instance;\r\n        }\r\n    }\r\n```\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}